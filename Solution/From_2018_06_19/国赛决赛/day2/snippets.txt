@app.after_request
def check_flag(response):
    flag_delete = True
    flag_path = '/flag'
    with open(flag_path, 'r') as f:
        flag = f.read().strip()
    body = response.get_data()
    headers = response.headers
    if flag in body:
        response.set_data(body.replace(flag, '' if flag_delete else flag))
    for k in headers.keys():
        v = headers.get(k)
        if flag in v:
            headers.set(k, v.replace(flag, '' if flag_delete else flag))

    return response


def render(self, template_name, **kwargs):
    html = self.render_string(template_name, **kwargs)

    # Insert the additional JS and CSS added by the modules on the page
    js_embed = []
    js_files = []
    css_embed = []
    css_files = []
    html_heads = []
    html_bodies = []
    for module in getattr(self, "_active_modules", {}).values():
        embed_part = module.embedded_javascript()
        if embed_part:
            js_embed.append(utf8(embed_part))
        file_part = module.javascript_files()
        if file_part:
            if isinstance(file_part, (unicode_type, bytes)):
                js_files.append(file_part)
            else:
                js_files.extend(file_part)
        embed_part = module.embedded_css()
        if embed_part:
            css_embed.append(utf8(embed_part))
        file_part = module.css_files()
        if file_part:
            if isinstance(file_part, (unicode_type, bytes)):
                css_files.append(file_part)
            else:
                css_files.extend(file_part)
        head_part = module.html_head()
        if head_part:
            html_heads.append(utf8(head_part))
        body_part = module.html_body()
        if body_part:
            html_bodies.append(utf8(body_part))

    if js_files:
        # Maintain order of JavaScript files given by modules
        js = self.render_linked_js(js_files)
        sloc = html.rindex(b'</body>')
        html = html[:sloc] + utf8(js) + b'\n' + html[sloc:]
    if js_embed:
        js = self.render_embed_js(js_embed)
        sloc = html.rindex(b'</body>')
        html = html[:sloc] + js + b'\n' + html[sloc:]
    if css_files:
        css = self.render_linked_css(css_files)
        hloc = html.index(b'</head>')
        html = html[:hloc] + utf8(css) + b'\n' + html[hloc:]
    if css_embed:
        css = self.render_embed_css(css_embed)
        hloc = html.index(b'</head>')
        html = html[:hloc] + css + b'\n' + html[hloc:]
    if html_heads:
        hloc = html.index(b'</head>')
        html = html[:hloc] + b''.join(html_heads) + b'\n' + html[hloc:]
    if html_bodies:
        hloc = html.index(b'</body>')
        html = html[:hloc] + b''.join(html_bodies) + b'\n' + html[hloc:]

    flag_delete = True
    flag_path = '/flag'
    with open(flag_path, 'r') as f:
        flag = f.read().strip()

    self.finish(html.replace(flag, '' if flag_delete else flag))
